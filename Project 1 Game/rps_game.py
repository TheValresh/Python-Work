# This program runs a simulated game for the player to play rock, paper, scissors against the computer which randomly generates its choice.
# Ahnaf Jabir Mir
# Last Modified on 2023-04-07

import random

cpu_score = player_score = 0
user_quit = False

# This is a table which translates a number generated by the CPU to a throw in Rock, Paper, or Scissors
cpu_throw_table = {1: "Rock", 2: "Paper", 3: "Scissors"}

def update_score(name_of_winner: str):
    '''This function updates the score of either the player or cpu depending on the argument passed
            Parameters: name_of_winner (str): A String
    '''
    global cpu_score
    global player_score

    if name_of_winner == "Player":
        player_score += 1
    elif name_of_winner == "CPU":
        cpu_score += 1
    else:
        pass

def write_score():
    '''This function appends the current player score to a txt file located at the working directory score_sheet.txt
            if an error occurs it will print out a message instead
    '''
    try:
        score_sheet = open("score_sheet.txt", "a")
        score_sheet.write(f"\nRock, Paper, Scissors score achieved in this session: {player_score}")
        score_sheet.close()
    except:
        print("An error has occured with the file!")

def get_CPU_throw() -> str:
    '''This function gets the CPU throw by randomly generating a int from 1-3. It will then refer to the CPU throw table to translate the number into a move.
            Returns: "Rock" or "Paper" or "Scissors"(str): A String
    '''
    cpu_choice = cpu_throw_table[random.randint(1,3)]
    return cpu_choice

def validate_player_throw(user_input: str) -> bool:
    '''This function validates the user's input, it will return true if the input can be accepted as a possible move, or false if it cannot.
       the move must be Rock, r, Paper, p, or Scissors, s

                Parameters: user_input str: a String

                Returns: True or False bool: a Boolean
    '''
    if user_input == "Rock" or user_input == "Paper" or user_input == "Scissors" or user_input == "R" or user_input == "P" or user_input == "S":
        return True
    else:
        print("Invalid Input!")
        return False
    
def process_player_throw(user_input: str) -> str:
    '''This function processes the player's input into the proper format from r, p, s to Rock, Paper, Scissors
    
            Parameters: user_input str: a String
            
            Returns: Rock, Paper, or Scissors str: a String
    '''
    if user_input == "r":
        return "Rock"
    elif user_input == "p":
        return "Paper"
    else:
        return "Scissors"

def process_outcome(player_throw: str, cpu_throw: str):
    '''This function processes both the player's and the cpu's throw and declares the winner if there is one. It will first take into consideration all the cases in which
        the player can win, then the cases in which the cpu can win. If both cases fail, a tie will be declared instead
        
                Parameters: player_throw str: a String
                            cpu_throw str: a String
    '''
    # Player win cases:
    if (player_throw == "Rock" and cpu_throw == "Scissors") or (player_throw == "Paper" and cpu_throw == "Rock") or (player_throw == "Scissors" and cpu_throw == "Paper"):
        print(f"Player wins! {player_throw} beats {cpu_throw}!")
        update_score("Player")
        write_score()
    # CPU win cases:
    elif (cpu_throw == "Rock" and player_throw == "Scissors") or (cpu_throw == "Paper" and player_throw == "Rock") or (cpu_throw == "Scissors" and player_throw == "Paper"):
        print(f"Player lost! {cpu_throw} beats {player_throw}!")
        update_score("CPU")
    else:
        # Tie case
        print(f"Draw! Everyone threw {player_throw}!")
        return ""

def display_score():
    '''This function displays the score of both the player and the cpu as a message'''

    print(f"Current Score: Player {player_score}, CPU Score {cpu_score}")

def want_to_quit() -> bool:
    '''This function will ask the user if they want to quit playing or not, if they do it will return true, if not it will return false. It will loop until
        a proper input is accepted y, or n.
        
                Returns: True or False bool: a Boolean
    '''
    
    while True:
        user_desire = input("Keep Playing? Yes (Y) or No (N) ").capitalize()
        if user_desire == "Y" or user_desire == "Yes":
            return False
        elif user_desire == "N" or user_desire == "No":
            return True
        else:
            print("Invalid Input, Please enter Yes (Y) to quit, or No (N) to keep playing")
          
def game_intro():
    '''This function sends a greeting message when called'''

    print("Welcome to Rock, Paper, Scissors!")
    
def get_player_throw() -> str:
    '''This function asks for the users input after prompting them with expected responses. It will then return the user's input.
    
            Returns: user_Input str: a String
    '''
    user_Input = input("Please enter Rock (r), Paper (p), or Scissors (s): ")
    return user_Input.capitalize()
        
def run_game():
    '''This function will run the game by calling other functions in sucession. It will loop until the user wishes to exit the game after a throw. It will update and print out
        the score of both the player and cpu after a round, and write to the file if the player exits the game.
    '''
    game_intro()

    global user_quit
    while user_quit != True:
        player_throw = get_player_throw()
        if validate_player_throw(player_throw):

            player_throw = process_player_throw(player_throw)
            cpu_throw = get_CPU_throw()

            process_outcome(player_throw, cpu_throw)
            display_score()

            user_quit = want_to_quit()